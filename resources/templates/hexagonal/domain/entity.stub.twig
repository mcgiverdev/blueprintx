{#
  Stub: Hexagonal domain model
  Variables sugeridas:
    - entity
    - namespaces.domain_models
    - module
#}
<?php

namespace {{ namespaces.domain_models|default('App\\Domain\\Models') }};

{% set modelMeta = model|default({}) %}
{% set identifier = modelMeta.identifier|default({}) %}
{% set identifierColumnType = identifier.column_type|default(null) %}
{% set usesUuidTrait = identifierColumnType in ['uuid', 'guid'] %}
{% set usesUlidTrait = identifierColumnType == 'ulid' %}
{% set relationReturnTypes = modelMeta.relation_return_types|default([]) %}
{% set relationImports = modelMeta.relation_imports|default([]) %}
{% set softDeletes = modelMeta.soft_deletes|default(false) %}
{% set authenticatable = modelMeta.authenticatable|default(false) %}
{% set hiddenAttributes = modelMeta.hidden|default([]) %}
{% set hashPassword = modelMeta.hash_password|default(false) %}
{% set usesSpatieRoles = authenticatable and auth.roles_driver|default('none') == 'spatie' %}
{% set spatieGuardName = auth.spatie_guard|default(null) %}
use Illuminate\Database\Eloquent\Factories\HasFactory;
{% if authenticatable %}
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
{% else %}
use Illuminate\Database\Eloquent\Model;
{% endif %}
{% if usesUuidTrait %}
use Illuminate\Database\Eloquent\Concerns\HasUuids;
{% endif %}
{% if usesUlidTrait %}
use Illuminate\Database\Eloquent\Concerns\HasUlids;
{% endif %}
{% for returnType in relationReturnTypes %}
use Illuminate\Database\Eloquent\Relations\{{ returnType }};
{% endfor %}
{% if softDeletes %}
use Illuminate\Database\Eloquent\SoftDeletes;
{% endif %}
{% for import in relationImports %}
use {{ import }};
{% endfor %}
{% if hashPassword %}
use Illuminate\Support\Facades\Hash;
{% endif %}
{% if usesSpatieRoles %}
use Spatie\Permission\Traits\HasRoles;
{% endif %}

class {{ entity.name|default('Sample')|studly }} extends {% if authenticatable %}Authenticatable{% else %}Model{% endif %}
{
    use HasFactory;
{% if authenticatable %}
    use HasApiTokens;
    use Notifiable;
{% endif %}
{% if usesUuidTrait %}
    use HasUuids;
{% endif %}
{% if usesUlidTrait %}
    use HasUlids;
{% endif %}
{% if softDeletes %}
    use SoftDeletes;
{% endif %}
{% if usesSpatieRoles %}
    use HasRoles;
{% endif %}

    protected $table = '{{ naming.entity_table|default("samples") }}';

    /**
     * @var array<int, string>
     */
    protected $fillable = [
{% for field in modelMeta.fillable|default([]) %}
        '{{ field }}',
{% else %}
        // TODO: enumerar atributos asignables en masa
{% endfor %}
    ];

    /**
     * @var array<string, string>
     */
    protected $casts = [
{% for name, cast in modelMeta.casts|default({}) %}
        '{{ name }}' => '{{ cast }}',
{% else %}
        // TODO: definir casts nativos
{% endfor %}
    ];

{% if hiddenAttributes is not empty %}
    /**
     * @var array<int, string>
     */
    protected $hidden = [
{% for attribute in hiddenAttributes %}
        '{{ attribute }}',
{% endfor %}
    ];

{% endif %}

{% if identifier.auto_increment is defined and not identifier.auto_increment %}
    public $incrementing = false;

{% endif %}
{% if identifier.key_type is defined and identifier.key_type %}
    protected $keyType = '{{ identifier.key_type }}';

{% endif %}
{% if usesSpatieRoles and spatieGuardName %}
    protected $guard_name = '{{ spatieGuardName }}';

{% endif %}
{% if not (modelMeta.timestamps|default(true)) %}
    public $timestamps = false;

{% endif %}
{% for relation in modelMeta.relations|default([]) %}
    public function {{ relation.method }}(): {{ relation.return_type }}
    {
        return $this->{{ relation.eloquent_method }}({{ relation.related_class }}::class{% if relation.foreign_key %}, '{{ relation.foreign_key }}'{% endif %});
    }
{% endfor -%}
{% if hashPassword %}

    public function setPasswordAttribute($value): void
    {
        if (! is_string($value) || $value === '') {
            $this->attributes['password'] = $value;

            return;
        }

        $this->attributes['password'] = Hash::needsRehash($value)
            ? Hash::make($value)
            : $value;
    }
{% endif %}
}
