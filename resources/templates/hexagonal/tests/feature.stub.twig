{% set api_middleware = blueprint.api.middleware|default([]) %}
{% if api_middleware is not iterable %}
{% set api_middleware = [] %}
{% endif %}
{% set requires_tenant_alias = false %}
{% set requires_tenancy_alias = false %}
{% set requires_ability_alias = false %}
{% set requires_abilities_alias = false %}
{% for middleware in api_middleware %}
{% set middleware_parts = middleware|split(':', 2) %}
{% set middleware_alias = middleware_parts[0]|default(middleware) %}
{% if middleware_alias == 'tenant' %}
{% set requires_tenant_alias = true %}
{% elseif middleware_alias == 'tenancy' %}
{% set requires_tenancy_alias = true %}
{% elseif middleware_alias == 'ability' %}
{% set requires_ability_alias = true %}
{% elseif middleware_alias == 'abilities' %}
{% set requires_abilities_alias = true %}
{% endif %}
{% endfor %}
{% set requires_router_alias = requires_tenant_alias or requires_tenancy_alias or requires_ability_alias or requires_abilities_alias %}
{% set requires_tenant_routes = requires_tenant_alias or requires_tenancy_alias %}
{% set tenant_schema = tests.tenant_schema|default({'required': false}) %}
{% set tenant_schema_dependencies = tests.tenant_schema_dependencies|default([]) %}
{% if tenant_schema_dependencies is not iterable %}
{% set tenant_schema_dependencies = [] %}
{% endif %}
{% set requires_tenant_migrations = tenant_schema.required|default(false) %}
<?php

namespace {{ namespaces.tests|default('Tests\Feature') }};

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use {{ entity.class|default('App\\Domain\\Sample\\Models\\Sample') }};
{% for import in relation_imports %}use {{ import }};
{% endfor %}
{% if tests.password_fields|length > 0 %}use Illuminate\Support\Facades\Hash;
{% endif %}
{% if requires_tenant_migrations %}use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
{% endif %}
{% if requires_tenant_routes %}use Illuminate\Support\Facades\Route;
{% endif %}

class {{ entity.name|default('Sample')|studly }}FeatureTest extends TestCase
{
        use RefreshDatabase;

{% if requires_tenant_routes %}        /**
         * @var array<int, bool>
         */
        private static array $registeredTenantRoutes = [];

{% endif %}
        protected function setUp(): void
    {
        parent::setUp();

        $this->withoutMiddleware([
            \Illuminate\Auth\Middleware\Authenticate::class,
            'role',
        ]);
{% if requires_router_alias %}
                $router = $this->app->make(\Illuminate\Routing\Router::class);

{% if requires_tenant_alias %}                $router->aliasMiddleware('tenant', \Illuminate\Routing\Middleware\SubstituteBindings::class);

{% endif %}{% if requires_tenancy_alias %}                $router->aliasMiddleware('tenancy', \Illuminate\Routing\Middleware\SubstituteBindings::class);

{% endif %}{% if requires_ability_alias %}                $router->aliasMiddleware('ability', \Illuminate\Routing\Middleware\SubstituteBindings::class);

{% endif %}{% if requires_abilities_alias %}                $router->aliasMiddleware('abilities', \Illuminate\Routing\Middleware\SubstituteBindings::class);

{% endif %}{% if requires_tenant_routes %}

                $this->registerTenantRoutes();
{% endif %}{% endif %}{% if requires_tenant_migrations %}        $this->bootstrapTenantSchema();

{% endif %}
    }

    public function test_index_returns_paginated_list(): void
    {
{% for relation in relations %}        ${{ relation.variable }} = {{ relation.class|class_basename }}::factory()->create();
{% endfor %}
{% if tests.factory_overrides|length > 0 %}        {{ entity.class|class_basename }}::factory()->count({{ tests.index_count }})->create([
{% for override in tests.factory_overrides %}            '{{ override.name }}' => {{ override.value }},
{% endfor %}        ]);
{% else %}        {{ entity.class|class_basename }}::factory()->count({{ tests.index_count }})->create();
{% endif %}

        $response = $this->getJson('{{ routes.api_resource }}');

        $response
            ->assertOk()
            ->assertJsonStructure([
                'data',
                'meta' => ['current_page', 'from', 'last_page', 'per_page', 'to', 'total'],
            ]);

        $this->assertSame({{ entity.class|class_basename }}::query()->count(), $response->json('meta.total'));
{% for include in tests.includes %}
        $this->assertNotNull($response->json('{{ include.index_path }}'));
{% if include.relation %}
        $this->assertSame(${{ include.relation.variable }}->id, $response->json('{{ include.index_path }}'));
{% endif %}
{% endfor %}
    }

    public function test_can_store_{{ naming.entity_variable }}(): void
    {
{% for relation in relations %}        ${{ relation.variable }} = {{ relation.class|class_basename }}::factory()->create();
{% endfor %}

        $payload = [
{% for field in tests.store_payload %}            '{{ field.name }}' => {{ field.value }},
{% endfor %}        ];

        $response = $this->postJson('{{ routes.api_resource }}', $payload);

        $response->assertCreated();
{% if tests.store_response_fragment|length > 0 %}
        $response->assertJsonFragment([
{% for fragment in tests.store_response_fragment %}            '{{ fragment.name }}' => {{ fragment.value }},
{% endfor %}        ]);
{% endif %}
{% if optimistic_locking.enabled %}
        $response->assertHeader('{{ optimistic_locking.response_header }}');
{% endif %}
{% for include in tests.includes %}
        $this->assertNotNull($response->json('{{ include.store_path }}'));
{% if include.relation %}
        $this->assertSame(${{ include.relation.variable }}->id, $response->json('{{ include.store_path }}'));
{% endif %}
{% endfor %}

{% if tests.password_fields|length > 0 %}
        $created = {{ entity.class|class_basename }}::query()->latest('created_at')->firstOrFail();

        foreach ([
{% for field in tests.password_fields %}            '{{ field.name }}' => {{ field.store_value }},
{% endfor %}        ] as $field => $value) {
            $this->assertTrue(Hash::check($value, $created->$field));
        }

        $this->assertDatabaseHas('{{ blueprint.table }}', [
            'id' => $created->id,
{% for field in tests.store_payload %}{% if field.is_password %}            '{{ field.name }}' => $created->{{ field.name }},
{% else %}            '{{ field.name }}' => {{ field.value }},
{% endif %}{% endfor %}        ]);
{% else %}
        $this->assertDatabaseHas('{{ blueprint.table }}', [
{% for field in tests.store_payload %}            '{{ field.name }}' => {{ field.value }},
{% endfor %}        ]);
{% endif %}
    }

    public function test_can_update_{{ naming.entity_variable }}(): void
    {
{% for relation in relations %}        ${{ relation.variable }} = {{ relation.class|class_basename }}::factory()->create();
{% endfor %}

{% if tests.factory_overrides|length > 0 %}        ${{ naming.entity_variable }} = {{ entity.class|class_basename }}::factory()->create([
{% for override in tests.factory_overrides %}            '{{ override.name }}' => {{ override.value }},
{% endfor %}        ]);
{% else %}        ${{ naming.entity_variable }} = {{ entity.class|class_basename }}::factory()->create();
{% endif %}

        $payload = [
{% for field in tests.update_payload %}            '{{ field.name }}' => {{ field.value }},
{% endfor %}        ];

{% if optimistic_locking.enabled and optimistic_locking.require_header %}        $response = $this->putJson('{{ routes.api_resource }}/' . ${{ naming.entity_variable }}->id, $payload, [
        '{{ optimistic_locking.header }}' => {% if tests.optimistic_locking_token_expression %}{{ tests.optimistic_locking_token_expression }}{% else %}'*'{% endif %},
    ]);
{% else %}        $response = $this->putJson('{{ routes.api_resource }}/' . ${{ naming.entity_variable }}->id, $payload);
{% endif %}

        $response->assertOk();
{% if tests.update_response_fragment|length > 0 %}
        $response->assertJsonFragment([
{% for fragment in tests.update_response_fragment %}            '{{ fragment.name }}' => {{ fragment.value }},
{% endfor %}        ]);
{% endif %}
{% if optimistic_locking.enabled %}
        $response->assertHeader('{{ optimistic_locking.response_header }}');
{% endif %}
{% for include in tests.includes %}
        $this->assertNotNull($response->json('{{ include.store_path }}'));
{% if include.relation %}
        $this->assertSame(${{ include.relation.variable }}->id, $response->json('{{ include.store_path }}'));
{% endif %}
{% endfor %}

{% if tests.password_fields|length > 0 %}
                ${{ naming.entity_variable }}->refresh();

                foreach ([
{% for field in tests.password_fields %}            '{{ field.name }}' => {{ field.update_value }},
{% endfor %}        ] as $field => $value) {
                        $this->assertTrue(Hash::check($value, ${{ naming.entity_variable }}->$field));
                }

                $this->assertDatabaseHas('{{ blueprint.table }}', [
                        'id' => ${{ naming.entity_variable }}->id,
{% for field in tests.update_payload %}{% if field.is_password %}            '{{ field.name }}' => ${{ naming.entity_variable }}->{{ field.name }},
{% else %}            '{{ field.name }}' => {{ field.value }},
{% endif %}{% endfor %}        ]);
{% else %}
                $this->assertDatabaseHas('{{ blueprint.table }}', [
                        'id' => ${{ naming.entity_variable }}->id,
{% for field in tests.update_payload %}            '{{ field.name }}' => {{ field.value }},
{% endfor %}        ]);
{% endif %}
    }

    public function test_can_delete_{{ naming.entity_variable }}(): void
    {
{% for relation in relations %}        ${{ relation.variable }} = {{ relation.class|class_basename }}::factory()->create();
{% endfor %}

{% if tests.factory_overrides|length > 0 %}        ${{ naming.entity_variable }} = {{ entity.class|class_basename }}::factory()->create([
{% for override in tests.factory_overrides %}            '{{ override.name }}' => {{ override.value }},
{% endfor %}        ]);
{% else %}        ${{ naming.entity_variable }} = {{ entity.class|class_basename }}::factory()->create();
{% endif %}

{% if optimistic_locking.enabled and optimistic_locking.require_header %}        $response = $this->deleteJson('{{ routes.api_resource }}/' . ${{ naming.entity_variable }}->id, [], [
            '{{ optimistic_locking.header }}' => {% if tests.optimistic_locking_token_expression %}{{ tests.optimistic_locking_token_expression }}{% else %}'*'{% endif %},
        ]);
{% else %}        $response = $this->deleteJson('{{ routes.api_resource }}/' . ${{ naming.entity_variable }}->id);
{% endif %}

        $response->assertNoContent();

        $this->assert{% if tests.uses_soft_deletes %}SoftDeleted{% else %}DatabaseMissing{% endif %}('{{ blueprint.table }}', [
            'id' => ${{ naming.entity_variable }}->id,
        ]);
    }
{% if requires_tenant_routes %}

        private function registerTenantRoutes(): void
        {
                $appId = spl_object_id($this->app);

                if (isset(self::$registeredTenantRoutes[$appId])) {
                        return;
                }

                if (! file_exists(base_path('routes/tenant.php'))) {
                        return;
                }

                Route::middleware('api')
                        ->prefix('api')
                        ->group(base_path('routes/tenant.php'));

                self::$registeredTenantRoutes[$appId] = true;
        }
{% endif %}{% if requires_tenant_migrations %}

        private function bootstrapTenantSchema(): void
        {
                if (! Schema::hasTable('{{ tenant_schema.table }}')) {
                        Schema::create('{{ tenant_schema.table }}', function (Blueprint $table): void {
                                {{ tenant_schema.primary.definition }}
{% for column in tenant_schema.columns %}                {{ column.definition }}
{% endfor %}{% if tenant_schema.timestamps %}                $table->timestamps();
{% endif %}{% if tenant_schema.soft_deletes %}                $table->softDeletes();
{% endif %}            });
                }

                Schema::table('{{ tenant_schema.table }}', function (Blueprint $table): void {
{% for column in tenant_schema.columns %}            if (! Schema::hasColumn('{{ tenant_schema.table }}', '{{ column.name }}')) {
                                {{ column.definition }}
                        }
{% endfor %}{% if tenant_schema.soft_deletes %}            if (! Schema::hasColumn('{{ tenant_schema.table }}', 'deleted_at')) {
                                $table->softDeletes();
                        }
{% endif %}        });
{% for dependency in tenant_schema_dependencies %}

                if (! Schema::hasTable('{{ dependency.table }}')) {
                        Schema::create('{{ dependency.table }}', function (Blueprint $table): void {
                                {{ dependency.primary.definition }}
{% for column in dependency.columns %}                {{ column.definition }}
{% endfor %}{% if dependency.timestamps %}                $table->timestamps();
{% endif %}{% if dependency.soft_deletes %}                $table->softDeletes();
{% endif %}            });
                }

                Schema::table('{{ dependency.table }}', function (Blueprint $table): void {
{% for column in dependency.columns %}            if (! Schema::hasColumn('{{ dependency.table }}', '{{ column.name }}')) {
                                {{ column.definition }}
                        }
{% endfor %}{% if dependency.soft_deletes %}            if (! Schema::hasColumn('{{ dependency.table }}', 'deleted_at')) {
                                $table->softDeletes();
                        }
{% endif %}        });
{% endfor %}
        }
{% endif %}
}
