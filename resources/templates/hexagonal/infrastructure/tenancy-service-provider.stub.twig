{#
  Stub: Hexagonal infrastructure TenancyServiceProvider bindings
  Variables:
    - namespace
    - imports (array of { fqcn, alias|null })
    - bindings (array of { interface_alias, implementation_alias })
#}
<?php

declare(strict_types=1);

namespace {{ namespace|default('App\\Providers') }};

use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Route;
use Stancl\JobPipeline\JobPipeline;
use Stancl\Tenancy\Events;
use Stancl\Tenancy\Jobs;
use Stancl\Tenancy\Listeners;
use Stancl\Tenancy\Middleware;
{% for import in imports %}use {{ import.fqcn }}{% if import.alias %} as {{ import.alias }}{% endif %};
{% endfor %}

class TenancyServiceProvider extends ServiceProvider
{
    public static string $controllerNamespace = '';

    /**
     * @return array<string, array<int, mixed>>
     */
    public function events(): array
    {
        if (! $this->tenancyDependenciesAvailable()) {
            return [];
        }

        return [
            Events\CreatingTenant::class => [],
            Events\TenantCreated::class => [
                JobPipeline::make([
                    Jobs\CreateDatabase::class,
                    Jobs\MigrateDatabase::class,
                ])->send(function (Events\TenantCreated $event) {
                    return $event->tenant;
                })->shouldBeQueued(false),
            ],
            Events\SavingTenant::class => [],
            Events\TenantSaved::class => [],
            Events\UpdatingTenant::class => [],
            Events\TenantUpdated::class => [],
            Events\DeletingTenant::class => [],
            Events\TenantDeleted::class => [
                JobPipeline::make([
                    Jobs\DeleteDatabase::class,
                ])->send(function (Events\TenantDeleted $event) {
                    return $event->tenant;
                })->shouldBeQueued(false),
            ],
            Events\CreatingDomain::class => [],
            Events\DomainCreated::class => [],
            Events\SavingDomain::class => [],
            Events\DomainSaved::class => [],
            Events\UpdatingDomain::class => [],
            Events\DomainUpdated::class => [],
            Events\DeletingDomain::class => [],
            Events\DomainDeleted::class => [],
            Events\DatabaseCreated::class => [],
            Events\DatabaseMigrated::class => [],
            Events\DatabaseSeeded::class => [],
            Events\DatabaseRolledBack::class => [],
            Events\DatabaseDeleted::class => [],
            Events\InitializingTenancy::class => [],
            Events\TenancyInitialized::class => [
                Listeners\BootstrapTenancy::class,
            ],
            Events\EndingTenancy::class => [],
            Events\TenancyEnded::class => [
                Listeners\RevertToCentralContext::class,
            ],
            Events\BootstrappingTenancy::class => [],
            Events\TenancyBootstrapped::class => [],
            Events\RevertingToCentralContext::class => [],
            Events\RevertedToCentralContext::class => [],
            Events\SyncedResourceSaved::class => [
                Listeners\UpdateSyncedResource::class,
            ],
            Events\SyncedResourceChangedInForeignDatabase::class => [],
        ];
    }

    public function register(): void
    {
{% if bindings %}
{% set binding_lines = [] %}
{% for binding in bindings %}
{% set binding_lines = binding_lines|merge(['$this->app->bind(' ~ binding.interface_alias ~ '::class, ' ~ binding.implementation_alias ~ '::class);']) %}
{% endfor %}
{{- ('        ' ~ binding_lines|join('\n        ')) ~ '\n' -}}
{% else %}
    //
{% endif %}
    }

    public function boot(): void
    {
        if (! $this->tenancyDependenciesAvailable()) {
            return;
        }

        $this->bootEvents();
        $this->mapRoutes();
        $this->makeTenancyMiddlewareHighestPriority();
    }

    protected function bootEvents(): void
    {
        foreach ($this->events() as $event => $listeners) {
            foreach ($listeners as $listener) {
                if ($listener instanceof JobPipeline) {
                    $listener = $listener->toListener();
                }

                Event::listen($event, $listener);
            }
        }
    }

    protected function mapRoutes(): void
    {
        $this->app->booted(function (): void {
            if (file_exists(base_path('routes/tenant.php'))) {
                Route::namespace(static::$controllerNamespace)
                    ->group(base_path('routes/tenant.php'));
            }
        });
    }

    protected function makeTenancyMiddlewareHighestPriority(): void
    {
        if (! $this->tenancyDependenciesAvailable()) {
            return;
        }

        $tenancyMiddleware = [
            Middleware\PreventAccessFromCentralDomains::class,
            Middleware\InitializeTenancyByDomain::class,
            Middleware\InitializeTenancyBySubdomain::class,
            Middleware\InitializeTenancyByDomainOrSubdomain::class,
            Middleware\InitializeTenancyByPath::class,
            Middleware\InitializeTenancyByRequestData::class,
        ];

        foreach (array_reverse($tenancyMiddleware) as $middleware) {
            $this->app[\Illuminate\Contracts\Http\Kernel::class]->prependToMiddlewarePriority($middleware);
        }
    }

    protected function tenancyDependenciesAvailable(): bool
    {
        return class_exists(\Stancl\JobPipeline\JobPipeline::class)
            && class_exists(\Stancl\Tenancy\Events\TenantCreated::class)
            && class_exists(\Stancl\Tenancy\Middleware\PreventAccessFromCentralDomains::class);
    }
}
