<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use {{ login_request_fqn }};
use {{ register_request_fqn }};
use {{ user_resource_fqn }};
use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpFoundation\Response;

class AuthController extends Controller
{
    public function login(LoginRequest $request): JsonResponse
    {
        $credentials = $request->validated();
        $tokenName = $this->resolveDeviceName($request, $credentials['device_name'] ?? null);

        /** @var User|null $user */
        $user = User::query()
            ->where('email', $credentials['email'])
            ->first();

        if ($user === null || ! Hash::check($credentials['password'], $user->password)) {
            throw ValidationException::withMessages([
                'email' => [__('auth.failed')],
            ]);
        }

        if (! $user->is_active) {
            throw ValidationException::withMessages([
                'email' => [__('auth.failed')],
            ]);
        }

        $user->forceFill(['last_login_at' => now()]);
        $user->save();
        $user->refresh();

        $user->tokens()->where('name', $tokenName)->delete();
        $token = $user->createToken($tokenName)->plainTextToken;

        return response()->json([
            'token' => $token,
            'token_type' => 'Bearer',
            'expires_at' => $this->tokenExpirationTimestamp(),
            'user' => new UserResource($user),
        ]);
    }

    public function register(RegisterRequest $request): JsonResponse
    {
        $data = $request->validated();
        $deviceName = $this->resolveDeviceName($request, $data['device_name'] ?? null);
        unset($data['password_confirmation'], $data['device_name']);

        $payload = array_merge([
            'role' => 'admin',
            'is_active' => true,
            'last_login_at' => now(),
        ], $data);

        $user = User::create($payload);
        $user->refresh();

        $token = $user->createToken($deviceName)->plainTextToken;

        return response()->json([
            'token' => $token,
            'token_type' => 'Bearer',
            'expires_at' => $this->tokenExpirationTimestamp(),
            'user' => new UserResource($user),
        ], Response::HTTP_CREATED);
    }

    public function logout(Request $request): JsonResponse
    {
        /** @var User|null $user */
        $user = $request->user();

        if ($user !== null) {
            $token = $user->currentAccessToken();

            if ($token !== null && method_exists($token, 'delete')) {
                $token->delete();
            } else {
                $user->tokens()->delete();
            }
        }

        return response()->json(null, Response::HTTP_NO_CONTENT);
    }

    public function me(Request $request): JsonResponse
    {
        /** @var User|null $user */
        $user = $request->user();

        if ($user === null) {
            return response()->json(null, Response::HTTP_UNAUTHORIZED);
        }

        return UserResource::make($user)->response();
    }

    private function tokenExpirationTimestamp(): ?string
    {
        $minutes = config('sanctum.expiration');

        if ($minutes === null) {
            return null;
        }

        return now()->addMinutes((int) $minutes)->toIso8601String();
    }

    private function resolveDeviceName(Request $request, ?string $provided): string
    {
        if (is_string($provided) && $provided !== '') {
            return $provided;
        }

        $userAgent = $request->userAgent();

        if (is_string($userAgent) && $userAgent !== '') {
            return Str::limit($userAgent, 120, '');
        }

        return 'api-token';
    }
}
